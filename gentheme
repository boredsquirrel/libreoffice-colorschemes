#!/bin/bash
#
# Extract a Libreoffice Color Scheme from the
# registrymodifications.xcu file
# and convert it into a theme addon
#
# NOTE
# Only works if you have a single custom theme
#

set -eou pipefail

### Check if all tools are available

available() { command -v $1 >/dev/null; }
require() {
  local MISSING=''
  for TOOL in $*; do
    if ! available $TOOL; then
      MISSING="$MISSING $TOOL"
    fi
  done

  echo $MISSING
}

NEEDS=$(require curl awk grep sed xmllint cat read)
if [ -n "$NEEDS" ]; then
  status "ERROR: The following tools are required but missing:"
  for NEED in $NEEDS; do
    echo "  - $NEED"
  done
  exit 1
fi

### Check if working directory is the git repo
WORKDIR="$PWD"

while true; do

  if [ -f "$WORKDIR/gentheme" ]; then
    break # Exit the loop if the file is found

  else
    echo "ERROR: You are not in the directory of the git repo."
    echo "Instead, you can enter the directory where the git repo is manually:"
    read -p "Directory of the git repo: " WORKDIR

    if [ -n "$WORKDIR" ]; then
      echo "Alternative directory set: $WORKDIR"
      if [ ! -f "$WORKDIR/gentheme" ]; then
        echo "Error: Wrong directory specified."
      fi
    else
      echo "No alternative directory set. Exiting script"
    fi

  fi
done

### Determine version of libreoffice

if flatpak info org.libreoffice.LibreOffice &> /dev/null; then
  # flatpak is used
  CONFDIR="$HOME/.var/app/org.libreoffice.LibreOffice/config/libreoffice/4/user"

elif if snap list | grep -q libreoffice &> /dev/null; then
  # snap is used
  CONFDIR="$HOME/snap/libreoffice/current/.config/libreoffice/4/user"

elif command -v libreoffice &> /dev/null; then
  # native version is used
  CONFDIR="$HOME/.config/libreoffice/4/user"

else
  echo "ERROR: LibreOffice config folder can not be found." && exit
fi

### Set variable
# THEMENAME=ABC
# AUTHOR=ABC
# WEBSITE=ABC

read -p "Creator name: " AUTHOR
read -p "Theme name: " THEMENAME
read -p "Website / Git repo: " WEBSITE

DATE=$(date +"%Y")

### Create theme dir

cp -r TEMPLATE "$THEMENAME"

### Check if there is a theme from an earlier extraction

if ls "$WORKDIR"/colorscheme*.xcu 1> /dev/null 2>&1; then
  # colorscheme already exists
  # renaming to "raw" for further processing
  find "$WORKDIR" -name 'colorscheme*.xcu' -exec mv {} "$WORKDIR/colorscheme-raw.xcu" \; -quit

else
  echo "Copying the config file."

  # Backup file
  cp "$CONFDIR/registrymodifications.xcu" ./registrymods-unformatted.xcu || echo "ERROR copying config file." && exit

  # Format the file
  xmllint --format registrymods-unformatted.xcu >registrymods.xcu && rm -f registrymods-unformatted.xcu || echo "ERROR linting the XML file. This is required. Install xmllint or open an issue." && exit

  # Extract theme part
  awk '/<item oor:path="\/org.openoffice.Office.UI\/ColorScheme\/ColorSchemes">/,/<\/item>/' registrymods.xcu >colorscheme-raw.xcu || echo "ERROR extracting theme parts from config." && exit

  # check if multiple themes are in that config
  if [ "$(wc -l < colorscheme-raw.xcu)" -gt 900 ];

    # count how many themes there are
    COUNTDOWN=$(grep -c '<item oor:path="/org.openoffice.Office.UI/ColorScheme/ColorSchemes">' colorscheme-raw.xcu) && echo "You have $COUNTDOWN themes in that config file."

    # Loop until all themes are separated
    while [ "$COUNTDOWN" -gt 1 ]; do

        # Separate all themes but the first to a separate file
        awk '/<item oor:path="\/org.openoffice.Office.UI\/ColorScheme\/ColorSchemes">/{found=1} found' colorscheme-raw.xcu > "colorscheme-$COUNT.xcu" && echo "Theme $COUNT saved in as 'colorscheme-$COUNT.xcu'."

        # Decrement COUNTDOWN
        COUNTDOWN=$((COUNTDOWN - 1))

        # Increment COUNT
        COUNT=$((COUNT + 1))
    done
    echo "All themes were saved in separate theme config files."

  fi

fi

### Change lines
sed -i '/item/d' colorscheme-raw.xcu || echo "ERROR deleting lines containing 'item'" && exit

sed -i '1i\
<?xml version="1.0" encoding="UTF-8"?>\
<!DOCTYPE oor:component-data SYSTEM "../../../../component-update.dtd">\
<oor:component-data xmlns:oor="http://openoffice.org/2001/registry"\
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\
  xmlns:install="http://openoffice.org/2004/installation" oor:name="UI"\
  oor:package="org.openoffice.Office">\
  <node oor:name="ColorScheme">\
    <node oor:name="ColorSchemes">' colorscheme-raw.xcu || echo "ERROR adding header lines to the file" && exit

cat >>colorscheme-raw.xcu <<EOF || echo "ERROR adding lines to the end of the file" && exit
    <prop oor:name="CurrentColorScheme">
      <value>$THEMENAME</value>
    </prop>
  </node>
</oor:component-data>
EOF

### Format again

xmllint --format colorscheme-raw.xcu >"$THEMENAME/Theme.xcu" && rm -f colorscheme-raw.xcu || echo "ERROR linting the file"

### Set author, name, date

[ -n "$AUTHOR" ] && find "$THEMENAME" -type f -exec sed -i 's/AUTHOR/\$AUTHOR/g' {} + || echo "No author name set, leaving placeholder."
[ -n "$THEMENAME" ] && find "$THEMENAME" -type f -exec sed -i 's/THEMENAME/\$THEMENAME/g' {} + || echo "No theme name set, leaving placeholder."
[ -n "$DATE" ] && find "$THEMENAME" -type f -exec sed -i 's/DATE/\$DATE/g' {} + || echo "No date set, leaving placeholder."
[ -n "$WEBSITE" ] && find "$THEMENAME" -type f -exec sed -i 's/WEBSITE/\$WEBSITE/g' {} + || echo "No website set, leaving placeholder."

### Set License

fallback-license() {
  cp LICENSE "$THEMENAME/LICENSE"
  echo "Download failed, using MPL 2.0"
}

cat <<EOF
Which license do you want to use?

  1: MIT
  2: Mozilla Public License 2.0
  3: WTFPL - Do What the Fuck You Want to Public License

Enter anything else to use a default one.

EOF

read -p "Enter the number of your choice: " choice

case $choice in
1)
  curl -o "$THEMENAME/LICENSE" https://mit-license.org/license.txt || fallback-license
  echo "MIT License set."
  ;;
2)
  curl -o "$THEMENAME/LICENSE" https://www.mozilla.org/media/MPL/2.0/index.f75d2927d3c1.txt || fallback-license
  echo "MPL 2.0 License set."
  ;;
3)
  curl -o "$THEMENAME/LICENSE" http://www.wtfpl.net/txt/copying/ || fallback-license
  echo "WTFPL License set."
  ;;
*)
  echo "Using default License."
  cp LICENSE "$THEMENAME/LICENSE"
  ;;
esac

### description

echo "Enter a description for your theme (Press Ctrl+D to save):"

# Read multiple lines of input until EOF (Ctrl+D)
cat >"$THEMENAME/pkg-description/pkg-description.en" || echo "ERROR writing description." && exit

cat "$THEMENAME/pkg-description/pkg-description.en" >>"$THEMENAME/README.md"

cat >>"$THEMENAME/README.md" <<EOF || echo "ERROR writing README." && exit

## Gallery

![Theme Writer](assets/theme-writer.jpg)


![Theme Calc](assets/theme-calc.jpg)


![Options Dialog](assets/theme-options-dialog.jpg)
EOF

cat <<EOF
Description set.

Now replace the screenshots in the "assets" folder with your own and set a logo under "logo.png".

Compress the folder "$THEMENAME" as "$THEMENAME.zip".

Replace .zip with .oxt

And your extension is ready!

EOF
